AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Description: Environment name (e.g., dev, prod, staging)
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
    Default: dev

  CaptchaSolvingLambdaPrefix:
    Description: Name of the Lambda function
    Type: String
    Default: EqmCaptchaSolvingLambda

Resources:

  EqmCaptchaSolvingLambda: #todo fix befor using
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${CaptchaSolvingLambdaPrefix}-${Environment}
      Role: !GetAtt EqmCaptchaSolvingLambdaRole.Arn
      Code:
        S3Bucket: !Sub 
            - "${ImportedBucketName}"
            - ImportedBucketName: !ImportValue 
                Fn::Sub: EqmPackagesBucketName-${Environment}
        S3Key: CaptchaSolvingLambda.zip
      Handler: rekognition-lambda.handler #>-
        #CaptchaSolvingLambda::CaptchaSolvingLambda.Function::FunctionHandler
      #Runtime: dotnet6
      Runtime: nodejs18.x
      #MemorySize: 256
      #Timeout: 20
    DependsOn:
      - EqmCaptchaSolvingLambdaRole
    
  EqmCaptchaSolvingLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${CaptchaSolvingLambdaPrefix}-${Environment}-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: #TODO maybe add DynamoDb read/write permissions if not possible to set on Dynamo side
        - PolicyName: EqmLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: #Fn::ImportValue:
                  #Fn::Sub 'RekognitionResultsTableArn-${Environment}' #!Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/RekognitionResults'
                  - !Sub 
                    - "${ResultsTableArn}"
                    - ResultsTableArn: !ImportValue 
                        Fn::Sub: RekognitionResultsTableArn-${Environment}

  EventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Event Rule for S3 Write Operations on EqmCaptchas bucket'
      EventPattern:
        source:
          - 'aws.s3'
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventName:
            - 'PutObject'
            - 'PostObject'
            - 'CompleteMultipartUpload'
          requestParameters:
            bucketName: 
              - !Sub 
                - "${ImportedBucketName}"
                - ImportedBucketName: !ImportValue 
                    Fn::Sub: EqmCaptchasBucketName-${Environment}
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt EqmCaptchaSolvingLambda.Arn
          Id: 'CaptchaSolvingTarget'
    DependsOn:
      - EqmCaptchaSolvingLambda

  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EqmCaptchaSolvingLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventBridgeRule.Arn

Outputs:

  EqmCaptchaSolvingLambdaArn:
    Description: "Captcha Solving Lambda ARN"
    Value: !GetAtt EqmCaptchaSolvingLambda.Arn
    Export:
      Name: EqmCaptchaSolvingLambdaArn
